name: TRMNL Screenshot

on:
  schedule:
    # Run at :40 every hour from 05:40 to 00:40 Madrid time (CET/CEST)
    - cron: '40 4-23 * * *'  # 05:40-00:40 Madrid = 04:40-23:40 UTC (CET) / 03:40-22:40 UTC (CEST)
  workflow_dispatch:  # Allow manual triggering
    inputs:
      url:
        description: 'URL to screenshot (optional - overrides default)'
        required: false
        type: string

jobs:
  screenshot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Install dependencies
      run: |
        npm init -y
        npm install playwright sharp
        
    - name: Install Playwright Chromium
      run: npx playwright install chromium
      
    - name: Create screenshot script
      run: |
        cat > screenshot.js << 'EOF'
        const { chromium } = require('playwright');
        const sharp = require('sharp');
        const fs = require('fs');
        
        (async () => {
          const browser = await chromium.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          const page = await browser.newPage({
            viewport: { width: 800, height: 480 }
          });
          
          // Set desktop user agent for proper font loading
          await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
          
          // Set longer timeout for font loading
          page.setDefaultTimeout(90000);
          
          try {
            const url = process.env.SCREENSHOT_URL || 'https://example.com';
            console.log(`Taking screenshot of: ${url}`);
            
            await page.goto(url, { 
              waitUntil: 'networkidle',
              timeout: 90000 
            });
            
            // Wait for fonts to load completely
            await page.evaluate(async () => {
              console.log('Starting font loading...');
              
              // Wait for document fonts
              await document.fonts.ready;
              console.log('Document fonts ready');
              
              // Wait for any @font-face fonts to load
              const fontFaces = Array.from(document.fonts);
              console.log(`Found ${fontFaces.length} font faces`);
              
              await Promise.all(fontFaces.map(async (font) => {
                try {
                  await font.loaded;
                  console.log(`Font loaded: ${font.family}`);
                } catch (e) {
                  console.log(`Font failed to load: ${font.family}`, e);
                }
              }));
              
              // Force load common fonts
              const testFonts = ['Inter', 'Roboto', 'Arial', 'sans-serif'];
              for (const fontFamily of testFonts) {
                try {
                  await document.fonts.load(`16px "${fontFamily}"`);
                  console.log(`Loaded font: ${fontFamily}`);
                } catch (e) {
                  console.log(`Could not load: ${fontFamily}`);
                }
              }
              
              // Additional check for web fonts
              return new Promise((resolve) => {
                if (document.fonts.status === 'loaded') {
                  console.log('All fonts loaded successfully');
                  resolve();
                } else {
                  document.fonts.addEventListener('loadingdone', () => {
                    console.log('Font loading done event fired');
                    resolve();
                  });
                  // Fallback timeout
                  setTimeout(() => {
                    console.log('Font loading timeout reached');
                    resolve();
                  }, 15000);
                }
              });
            });
            
            // Additional wait to ensure everything is rendered
            await page.waitForTimeout(8000);
            
            // Take screenshot with high quality
            const screenshot = await page.screenshot({
              type: 'png',
              fullPage: false,
              clip: { x: 0, y: 0, width: 800, height: 480 }
            });
            
            // Convert to optimized 1-bit PNG for TRMNL
            await sharp(screenshot)
              .resize(800, 480, { 
                kernel: sharp.kernel.lanczos3,
                fit: 'contain',
                background: { r: 255, g: 255, b: 255, alpha: 1 }
              })
              .gamma(1.2)  // Adjust gamma for better contrast
              .sharpen({ sigma: 0.5, m1: 1, m2: 2 })  // Sharpen text
              .threshold(140, { 
                greyscale: true,
                colourSpace: 'b-w'
              })
              .png({ 
                compressionLevel: 9,
                colors: 2,
                palette: true,
                dither: 1.0  // Use dithering for better quality
              })
              .toFile('trmnl-screenshot.png');
            
            console.log('Screenshot saved as trmnl-screenshot.png');
            
            // Log file size for monitoring
            const stats = fs.statSync('trmnl-screenshot.png');
            console.log(`File size: ${stats.size} bytes`);
            
          } catch (error) {
            console.error('Error taking screenshot:', error);
            process.exit(1);
          } finally {
            await browser.close();
          }
        })();
        EOF
        
    - name: Take screenshot
      env:
        SCREENSHOT_URL: ${{ inputs.url || 'https://wetterdirect.netlify.app/dashboard' }}  # Replace with your actual URL
      run: node screenshot.js
      
    - name: Verify screenshot
      run: |
        if [ -f "trmnl-screenshot.png" ]; then
          echo "Screenshot created successfully"
          file trmnl-screenshot.png
        else
          echo "Screenshot not found!"
          exit 1
        fi
        
    - name: Commit screenshot
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add trmnl-screenshot.png
        
        # Only commit if there are changes
        if ! git diff --cached --quiet; then
          git commit -m "Update TRMNL screenshot $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "Screenshot updated and committed"
        else
          echo "No changes to screenshot"
        fi
